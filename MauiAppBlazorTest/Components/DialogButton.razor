@using MauiAppBlazorTest.Values
@using MauiAppBlazorTest.Models
@namespace MauiAppBlazorTest.Components

<MudButton Variant="GetVariant()" Style="@ButtonColorStyle()" OnClick="async () => await OnButtonClickedCallback()">@Label</MudButton>

@code {

    [Parameter] public string Color { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public EventCallback<ColorSwitcher> OnActiveStateChanged { get; set; }
    [Parameter] public List<ButtonStateModel> Buttons { get; set; }

    //private bool _isActive;
    private const string BaseStyle = "margin: 2px; height: 3vw;";

    private bool IsActive()
    {
        int activeElements = 0;
        int totalElements = 0;
        foreach (var btn in Buttons)
        {
            if (btn.Color == Color || Label == "alle" && btn.IsHalfHeight == false && btn.IsHalfWidth == false)
            {
                activeElements = btn.State == State.Active ? activeElements + 1 : activeElements;
                totalElements++;
            }
        }
        return activeElements == totalElements;
    }

    private string ButtonColorStyle()
    {
        return BaseStyle + (IsActive() ?
            $"background-color: {Color}; color: {(Color == CustomColor.White ? CustomColor.DarkGrey : CustomColor.White)}" :
            $"background-color: transparent; color: {Color}; border-color: {Color};");
    }

    private Variant GetVariant()
    {
        return IsActive() ? Variant.Filled : Variant.Outlined;
    }

    private async Task OnButtonClickedCallback()
    {
        //_isActive = !_isActive;
        var colorSwitcher = new ColorSwitcher(Color, !IsActive());
        await OnActiveStateChanged.InvokeAsync(colorSwitcher);
    }

}