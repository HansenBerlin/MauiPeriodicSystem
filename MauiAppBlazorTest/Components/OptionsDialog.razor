@using MauiAppBlazorTest.Values
@using MauiAppBlazorTest.Models
@using MauiAppBlazorTest.Interfaces
@using Color = MudBlazor.Color
@inject IButtonActivationController ButtonActivationController;
@namespace MauiAppBlazorTest.Components


<MudDialog @bind-IsVisible="@IsVisible" >
    <DialogContent>
        <div class="d-flex flex-column py-1" style="height: 80vh;">
            @foreach (var model in CategoryButtons.Buttons)
            {
                <DialogButton 
                    Model="model"
                    OnActiveStateChanged="async x => await OnButtonClicked(x)" />
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton 
            Style="margin: auto;" 
            Color="Color.Primary" 
            OnClick="@Close" >
            schlie</MudButton>
            
    </DialogActions>
</MudDialog>

@code {

    [Parameter] 
    public bool IsVisible { get; set; }

    [Parameter] 
    public CategoryButtonModel CategoryButtons { get; set; }

    [Parameter] 
    public EventCallback<ColorSwitcher> OnColorActivated { get; set; }
    
    [Parameter] 
    public EventCallback<State> OnColorsActivated { get; set; }
    
    [Parameter] 
    public EventCallback OnClosed { get; set; }
    
    
    private void Close()
    {
        IsVisible = false;
        OnClosed.InvokeAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        foreach (var btn in CategoryButtons.Buttons)
        {
            btn.State = ButtonActivationController.UpdatedButtonState(btn.ActivatesTag);
        }
    }

    private async Task OnButtonClicked(ColorSwitcher colorSwitcher)
    {
        if (colorSwitcher.WithTag == Tags.All)
        {
            foreach (var btn in CategoryButtons.Buttons)
            {
                btn.State = colorSwitcher.ToState;
            }
            StateHasChanged();
            await OnColorsActivated.InvokeAsync(colorSwitcher.ToState);
        }
        else
        {
            await OnColorActivated.InvokeAsync(colorSwitcher);
        }
    }
}