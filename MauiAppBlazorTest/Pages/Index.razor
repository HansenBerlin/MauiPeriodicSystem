@page "/"
@using MauiAppBlazorTest.Components
@using MauiAppBlazorTest.Models
@using System.Text.Json
@using System.Text
@using System.Net.Mime
@using System.Net.Http.Json
@using MauiAppBlazorTest.Interfaces
@using MauiAppBlazorTest.Values
@inject HttpClient HttpClient;
@inject IButtonActivationController ButtonActivationController;
@inject IButtonGrid ButtonModels;

<div style="padding-left: 2vw; padding-right: 2vw; padding-top: 2vw;">
    @foreach (var row in ButtonModels.Grid)
    {
        <div style="justify-content: center; display: flex;">
            @foreach (var model in row)
            {
                <SwitchButton Model="model" OnModelChanged="async x => await SingleButtonClicked(x)" />
            }
        </div>
    }
    <OptionsDialog IsVisible="_isDialogVisible"
                   OnColorActivated="async x => await DialogColorButtonClicked(x)"
                   OnColorsActivated="async x => await DialogAllButtonClicked(x)"
                   OnClosed="() => { _isDialogVisible = false; }"
                   CategoryButtons="new CategoryButtonModel()"
                   />
</div>
<MudButton Style="position: absolute; width: 17.9vw; height: 4.3vw; top: 0; margin: 8.8vw auto auto 33.2vw; font-size: 1.2vw; background-color: transparent; border-color: black;"
           OnClick="OpenDialog"
           Variant="Variant.Filled"
           Color="Color.Primary">
    Elementgruppen
</MudButton>

@code {

    const string EndpointMultiple = "http://192.168.10.60:5000/set";
    const string EndpointGetState = "http://192.168.10.60:5000/active";
    bool _isDialogVisible;
    private int _cachedValue = 0;
    private readonly PeriodicTimer _timer = new(TimeSpan.FromSeconds(1));

    protected override async Task OnInitializedAsync()
    {
        while (await _timer.WaitForNextTickAsync())
        {
            await UpdateButtons();
        }
    }

    private bool Changed(Dictionary<int, bool> serverValues)
    {
        int cachedValue = 0;
        foreach(var kv in serverValues)
        {
            cachedValue += kv.Key * Convert.ToInt32(kv.Value);
        }
        bool serverValuesHaveChanged = _cachedValue != cachedValue;
        _cachedValue = serverValuesHaveChanged ? cachedValue : _cachedValue;
        return serverValuesHaveChanged;
    }

    private async Task UpdateButtons()
    {
        var response = await HttpClient.GetAsync(EndpointGetState);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadFromJsonAsync<Dictionary<int, bool>>();
            if (Changed(content) == false)
            {
                return;
            }
            foreach (var btn in ButtonModels.AllButtons)
            {                
                var isActive = content[btn.Pin];
                btn.State = isActive ? State.Active : State.Inactive;
            }
            StateHasChanged();
        }
    }

    private void OpenDialog()
    {
        _isDialogVisible = !_isDialogVisible;
    }

    private async Task DialogColorButtonClicked(ColorSwitcher colorSwitcher)
    {
        foreach (var btn in ButtonModels.PassiveButtons
            .Where(btn => btn.OwnTags.Contains(colorSwitcher.WithTag)))
        {
            btn.State = colorSwitcher.ToState;
        }
        ButtonActivationController.UpdateActivatorButtons();
        //StateHasChanged();

        await PostUpdatedStates();
    }

    private async Task DialogAllButtonClicked(State toState)
    {
        foreach (var btn in ButtonModels.AllButtons)
        {
            btn.State = toState;
        }
        //StateHasChanged();
       
        await PostUpdatedStates();
    }

    private async Task PostUpdatedStates()
    {
        var dict = new Dictionary<int, string>();
        foreach (var btn in ButtonModels.AllButtons)
        {
            if (btn.State == State.Active)
            {
                var color = btn.Color == "#212121" ? "#909090" : btn.Color;
                dict.Add(btn.Pin, color);
            }
            else if (btn.State == State.Inactive)
            {
                dict.Add(btn.Pin, "#000000");
            }            
        }
        var json = new StringContent(
            JsonSerializer.Serialize(dict),
            Encoding.UTF8,
            MediaTypeNames.Application.Json);
        await HttpClient.PostAsync(EndpointMultiple, json);
    }

    private async Task SingleButtonClicked(ElementButtonModel model)
    {
        if (model.ActivatesTag != Tags.None)
        {
            foreach (var btn in ButtonModels.PassiveButtons
                .Where(btn => btn.OwnTags.Contains(model.ActivatesTag)))
            {
                btn.State = model.State;
            }
        }
        ButtonActivationController.UpdateActivatorButtons();
        await PostUpdatedStates();
    }
}